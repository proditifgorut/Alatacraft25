/*
# [Initial Schema Fix]
This script corrects the initial database schema, resolving a data type mismatch error.

## Query Description:
This script defines the core tables for the Alatacrat application, including categories, products, user profiles, orders, and order items. It fixes a previous error where a foreign key data type was incorrect. It also sets up Row Level Security (RLS) policies and a trigger to automatically create user profiles upon registration. This script is designed to be safe to run multiple times.

## Metadata:
- Schema-Category: "Structural"
- Impact-Level: "Low"
- Requires-Backup: false
- Reversible: false (but can be re-run safely)

## Structure Details:
- Tables created: categories, products, profiles, orders, order_items
- Functions created: handle_new_user
- Triggers created: on_auth_user_created
- RLS Policies: Enabled and configured for all tables.

## Security Implications:
- RLS Status: Enabled
- Policy Changes: Yes, policies are defined for all tables to restrict access based on user roles.
- Auth Requirements: Policies are linked to authenticated user roles.
*/

-- 1. Categories Table
CREATE TABLE IF NOT EXISTS public.categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    slug TEXT NOT NULL UNIQUE,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- 2. Products Table
CREATE TABLE IF NOT EXISTS public.products (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL,
    description TEXT,
    price NUMERIC(10, 2) NOT NULL,
    image_url TEXT,
    stock INT DEFAULT 0,
    rating NUMERIC(2, 1) DEFAULT 0.0,
    category_id BIGINT REFERENCES public.categories(id),
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- 3. Profiles Table (linking to auth.users)
CREATE TABLE IF NOT EXISTS public.profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    full_name TEXT,
    role TEXT NOT NULL DEFAULT 'user',
    updated_at TIMESTAMPTZ
);

-- 4. Orders Table
CREATE TABLE IF NOT EXISTS public.orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
    total_price NUMERIC(10, 2) NOT NULL,
    status TEXT NOT NULL DEFAULT 'pending',
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- 5. Order Items Table (FIX APPLIED HERE)
CREATE TABLE IF NOT EXISTS public.order_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id BIGINT NOT NULL REFERENCES public.orders(id) ON DELETE CASCADE,
    product_id UUID NOT NULL REFERENCES public.products(id), -- <-- CORRECTED DATA TYPE
    quantity INT NOT NULL,
    price NUMERIC(10, 2) NOT NULL
);

-- 6. Function to create a profile for a new user
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, role)
  VALUES (
    NEW.id,
    NEW.raw_user_meta_data->>'full_name',
    COALESCE(NEW.raw_user_meta_data->>'role', 'user')
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 7. Trigger to call the function when a new user signs up
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- 8. Enable RLS for all tables
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.order_items ENABLE ROW LEVEL SECURITY;

-- 9. RLS Policies
-- Public can read categories and products
DROP POLICY IF EXISTS "Public can read categories" ON public.categories;
CREATE POLICY "Public can read categories" ON public.categories FOR SELECT USING (true);

DROP POLICY IF EXISTS "Public can read products" ON public.products;
CREATE POLICY "Public can read products" ON public.products FOR SELECT USING (true);

-- Users can view their own profile
DROP POLICY IF EXISTS "Users can view their own profile" ON public.profiles;
CREATE POLICY "Users can view their own profile" ON public.profiles FOR SELECT USING (auth.uid() = id);

-- Users can update their own profile
DROP POLICY IF EXISTS "Users can update their own profile" ON public.profiles;
CREATE POLICY "Users can update their own profile" ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- Users can view their own orders
DROP POLICY IF EXISTS "Users can view their own orders" ON public.orders;
CREATE POLICY "Users can view their own orders" ON public.orders FOR SELECT USING (auth.uid() = user_id);

-- Users can create their own orders
DROP POLICY IF EXISTS "Users can create their own orders" ON public.orders;
CREATE POLICY "Users can create their own orders" ON public.orders FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Users can see their own order items
DROP POLICY IF EXISTS "Users can see their own order items" ON public.order_items;
CREATE POLICY "Users can see their own order items" ON public.order_items FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM public.orders
    WHERE orders.id = order_items.order_id AND orders.user_id = auth.uid()
  )
);

-- Admin has full access
DROP POLICY IF EXISTS "Admins have full access to categories" ON public.categories;
CREATE POLICY "Admins have full access to categories" ON public.categories FOR ALL
  USING (EXISTS (
    SELECT 1 FROM public.profiles WHERE profiles.id = auth.uid() AND profiles.role = 'admin'
  ));

DROP POLICY IF EXISTS "Admins have full access to products" ON public.products;
CREATE POLICY "Admins have full access to products" ON public.products FOR ALL
  USING (EXISTS (
    SELECT 1 FROM public.profiles WHERE profiles.id = auth.uid() AND profiles.role = 'admin'
  ));

DROP POLICY IF EXISTS "Admins have full access to profiles" ON public.profiles;
CREATE POLICY "Admins have full access to profiles" ON public.profiles FOR ALL
  USING (EXISTS (
    SELECT 1 FROM public.profiles WHERE profiles.id = auth.uid() AND profiles.role = 'admin'
  ));

DROP POLICY IF EXISTS "Admins have full access to orders" ON public.orders;
CREATE POLICY "Admins have full access to orders" ON public.orders FOR ALL
  USING (EXISTS (
    SELECT 1 FROM public.profiles WHERE profiles.id = auth.uid() AND profiles.role = 'admin'
  ));

DROP POLICY IF EXISTS "Admins have full access to order_items" ON public.order_items;
CREATE POLICY "Admins have full access to order_items" ON public.order_items FOR ALL
  USING (EXISTS (
    SELECT 1 FROM public.profiles WHERE profiles.id = auth.uid() AND profiles.role = 'admin'
  ));


-- 10. Seed Data (only if tables are empty)
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM public.categories) THEN
    INSERT INTO public.categories (name, slug) VALUES
    ('Tas', 'tas'),
    ('Dekorasi', 'dekorasi'),
    ('Aksesori Rumah', 'aksesori-rumah'),
    ('Premium', 'premium');
  END IF;
END $$;

DO $$
DECLARE
  tas_id BIGINT;
  dekorasi_id BIGINT;
  aksesori_id BIGINT;
BEGIN
  IF NOT EXISTS (SELECT 1 FROM public.products) THEN
    SELECT id INTO tas_id FROM public.categories WHERE slug = 'tas';
    SELECT id INTO dekorasi_id FROM public.categories WHERE slug = 'dekorasi';
    SELECT id INTO aksesori_id FROM public.categories WHERE slug = 'aksesori-rumah';

    INSERT INTO public.products (name, description, price, image_url, stock, rating, category_id) VALUES
    ('Tas Tote Premium', 'Tas anyaman eceng gondok dengan handle kulit asli.', 180000, 'https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/300x300/8ea071/ffffff?text=Tas+Tote', 20, 4.8, tas_id),
    ('Alas Meja Natural', 'Alas meja bundar untuk sentuhan alami di ruang makan.', 95000, 'https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/300x300/b4a47e/ffffff?text=Alas+Meja', 35, 4.5, aksesori_id),
    ('Hiasan Dinding Mandala', 'Hiasan dinding besar dengan pola mandala yang rumit.', 125000, 'https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/300x300/a08d63/ffffff?text=Hiasan+Dinding', 15, 4.7, dekorasi_id),
    ('Tempat Pensil Minimalis', 'Tempat pensil elegan untuk meja kerja Anda.', 45000, 'https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/300x300/708158/ffffff?text=Tempat+Pensil', 50, 4.3, aksesori_id),
    ('Keranjang Multifungsi', 'Keranjang serbaguna untuk penyimpanan mainan atau laundry.', 110000, 'https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/300x300/c8bea2/ffffff?text=Keranjang', 25, 4.6, aksesori_id),
    ('Clutch Pesta Elegan', 'Clutch malam yang mewah dan ramah lingkungan.', 250000, 'https://img-wrapper.vercel.app/image?url=https://img-wrapper.vercel.app/image?url=https://placehold.co/300x300/f59e0b/ffffff?text=Clutch', 10, 4.9, tas_id);
  END IF;
END $$;
